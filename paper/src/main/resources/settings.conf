# +----------------------+
# | PLUGIN CONFIGURATION |
# +----------------------+
# This file is in the HOCON format: see https://github.com/lightbend/config/blob/master/HOCON.md
# Times are in milliseconds
# Type [optional: values] (default)

# Type definitions:
#   Duration:
#     * 1d 2h 3m 4.5s (days/hours/minutes/seconds)
#   Factor:
#    * 1d 2h 3m 4.5s (as a duration)
#    * 1.5x (speed multiplier)
#    * 150% (speed percentage)
#   Color:
#    * [ red, green, blue ]
#    * "#rrggbb"
#    * "named_text_color" e.g. "dark_red"
#   Color modifier:
#     * [ "hsv", [ hue, saturation, value ] ] (HSV modifier)
#     * [ "rgba", color, alpha ] (RGB modifier, with an extra alpha field)

# The level which to log messages at. Only messages with this level or above will be logged.
# Enum [debug, verbose, info, warning, error] ("info")
log_level: "verbose"
# How detailed the stack traces should be when logged.
# Enum [full, simplified, minimal] ("full")
stack_trace_logging: "full"
# The default locale used when creating messages without any locale (e.g. to the console).
# String [https://docs.oracle.com/javase/7/docs/api/java/util/Locale.html#forLanguageTag(java.lang.String)] ("en-US")
locale: "en-US"
# Determines if bStats should be enabled. This has little performance impact, so please keep this on if you can!
# Boolean (true)
enable_bstats: true
# How long to wait between each autosave. Set to 0s to only save on disable.
# Duration (30m)
autosave_interval: 30m

# Settings for displaying boss bars.
boss_bar: {
  # How full the boss bars are, between 0 and 1.
  # Decimal (0)
  progress: 0
  # What color the boss bar is.
  # Enum [https://jd.adventure.kyori.net/api/4.9.3/net/kyori/adventure/bossbar/BossBar.Color.html] ("white")
  color: "white"
  # What overlay/style is used in the boss bar.
  # Enum [https://jd.adventure.kyori.net/api/4.9.3/net/kyori/adventure/bossbar/BossBar.Overlay.html] ("progress")
  overlay: "progress"
}

# Display configuration.
display: {
  # How long between each message being sent.
  update_interval: 50
  # The configurations per chat position display slot.
  # Chat position [chat, action_bar, title, subtitle, tab_header, tab_footer, boss_bar]
  positions: {
    boss_bar: {
      # The key (with `display.position.` prefixed) which this message is localized under.
      # String (required)
      lc_key: "boss_bar"
      # The placeholders that this message uses.
      # List <Enum [time, season, temperature, humidity]> ([])
      placeholders: [ "time", "season", "temperature", "humidity" ]
    }
  }
  # The string format for the temperature.
  # Format string (required)
  temperature_format: "%,.1f"
  # The string format for the humidity.
  # Format string (required)
  humidity_format: "%,.0f"
  # The math expression applied to the temperature display, where `x` is the original value.
  # Math expression (null)
  temperature_expr: "x * 10 + 20"
  # The math expression applied to the humidity display, where `x` is the original value.
  # Math expression (null)
  humidity_expr: "x * 100"
}

# Time dilation configuration.
time_dilation: {
  # The configurations for individual worlds.
  # If a configuration is not present for a world, the `default` configuration is used.
  worlds: {
    # Configuration for world `world` (the overworld).
    world: {
      # The length of the [ day, night ] in real time, as factors.
      # Cycle duration ([ 1x, 1x ])
      duration: [ 60m, 60m ]
      # The length of days/nights based on the current season.
      # NB: based off of the *default biome configuration*'s season
      seasons: {
        mid_summer: [ 80m, 40m ]
        late_summer: ${time_dilation.worlds.world.seasons.mid_summer}

        mid_winter: [ 40m, 80m ]
        late_winter: ${time_dilation.worlds.world.seasons.mid_winter}
      }
    }
  }
}

season: {
  base: {
    weight: 1
  }
  color: {
    # Definitions for use further down.
    early_spring: { base: [ "hsv", [ 0, -0.05, 0 ] ], foliage: [ "hsv", [ 0.02, -0.02, -0.005 ] ] }
    mid_spring:   { base: [ "hsv", [ 0, 0, 0 ] ],     foliage: ${season.color.mid_spring.base} }
    late_spring:  { base: [ "hsv", [ 0, 0.03, 0 ] ],  foliage: ${season.color.late_spring.base} }

    early_summer: { base: [ "hsv", [ 0, 0.05, 0 ] ],  foliage: ${season.color.early_summer.base} }
    mid_summer:   { base: [ "hsv", [ 0, 0.1, 0 ] ],   foliage: ${season.color.mid_summer.base} }
    late_summer:  { base: [ "hsv", [ 0, 0.075, 0 ] ], foliage: ${season.color.late_summer.base} }

    early_autumn: { base: [ "hsv", [ 0, 0.06, 0 ] ],  foliage: [ "hsv", [ -0.05, 0.07, 0 ] ] }
    mid_autumn:   { base: [ "hsv", [ 0, 0.04, 0 ] ],  foliage: [ "hsv", [ -0.105, 0.07, 0 ] ] }
    late_autumn:  { base: [ "hsv", [ 0, -0.02, 0 ] ], foliage: [ "hsv", [ 0.01, 0.2, 0 ] ] }

    early_winter: { base: [ "hsv", [ 0, -0.1, 0 ] ],  foliage: [ "hsv", [ 0.04, -0.1, -0.015 ] ] }
    mid_winter:   { base: [ "hsv", [ 0, -0.15, 0 ] ], foliage: [ "hsv", [ 0.0761, -0.15, -0.03 ] ] }
    late_winter:  { base: [ "hsv", [ 0, -0.1, 0 ] ],  foliage: [ "hsv", [ 0.04, -0.1, -0.015 ] ] }
  }
}

# Seasons configuration.
seasons: {
  # If biome keys' season names should be hidden
  # Off: `minecraft:plains` during `early_spring` -> `demeter:minecraft_plains_early_spring`
  # On:  `minecraft:plains` during `early_spring` -> `demeter:minecraft_plains_8db3721f`
  # Boolean (false)
  obfuscate_biome_keys: false
  # How long between each chunk update check, wherein all biomes are refreshed to match the current season.
  # Duration (1m)
  chunk_update_interval: 1m
  # Defines the seasons.
  seasons: {
    early_spring: ${season.base} {
      # The "general" color of the season, used in chat messages.
      # Color (required)
      color: "#78b450"
      # The color of grass.
      # Color modifier
      grass_color:     ${season.color.early_spring.foliage}
      # The color of foliage.
      # Color modifier
      foliage_color:   ${season.color.early_spring.foliage}
      # The color of fog - below the horizon.
      # Color modifier
      fog_color:       ${season.color.early_spring.base}
      # The color of the sky - above the horizon.
      # Color modifier
      sky_color:       ${season.color.early_spring.base}
      # The color of water.
      # Color modifier
      water_color:     ${season.color.early_spring.base}
      # The color of the fog when you are underwater.
      # Color modifier
      water_fog_color: ${season.color.early_spring.base}
    }
    mid_spring: ${seasons.seasons.early_spring} {
      grass_color:     ${season.color.mid_spring.foliage}
      foliage_color:   ${season.color.mid_spring.foliage}
      fog_color:       ${season.color.mid_spring.base}
      sky_color:       ${season.color.mid_spring.base}
      water_color:     ${season.color.mid_spring.base}
      water_fog_color: ${season.color.mid_spring.base}
    }
    late_spring: ${seasons.seasons.mid_spring} {
      grass_color:     ${season.color.late_spring.foliage}
      foliage_color:   ${season.color.late_spring.foliage}
      fog_color:       ${season.color.late_spring.base}
      sky_color:       ${season.color.late_spring.base}
      water_color:     ${season.color.late_spring.base}
      water_fog_color: ${season.color.late_spring.base}
    }

    early_summer: ${season.base} {
      color: "#e6c81e"
      grass_color:     ${season.color.early_summer.foliage}
      foliage_color:   ${season.color.early_summer.foliage}
      fog_color:       ${season.color.early_summer.base}
      sky_color:       ${season.color.early_summer.base}
      water_color:     ${season.color.early_summer.base}
      water_fog_color: ${season.color.early_summer.base}
    }
    mid_summer: ${seasons.seasons.early_summer} {
      # The type of precipitation that occurs.
      # Enum [none, rain, snow]
      precipitation: "none"
      grass_color:     ${season.color.mid_summer.foliage}
      foliage_color:   ${season.color.mid_summer.foliage}
      fog_color:       ${season.color.mid_summer.base}
      sky_color:       ${season.color.mid_summer.base}
      water_color:     ${season.color.mid_summer.base}
      water_fog_color: ${season.color.mid_summer.base}
    }
    late_summer: ${seasons.seasons.mid_summer} {
      grass_color:     ${season.color.late_summer.foliage}
      foliage_color:   ${season.color.late_summer.foliage}
      fog_color:       ${season.color.late_summer.base}
      sky_color:       ${season.color.late_summer.base}
      water_color:     ${season.color.late_summer.base}
      water_fog_color: ${season.color.late_summer.base}
    }

    early_autumn: ${season.base} {
      color: "#ff8c14"
      grass_color:     ${season.color.early_autumn.foliage}
      foliage_color:   ${season.color.early_autumn.foliage}
      fog_color:       ${season.color.early_autumn.base}
      sky_color:       ${season.color.early_autumn.base}
      water_color:     ${season.color.early_autumn.base}
      water_fog_color: ${season.color.early_autumn.base}
    }
    mid_autumn: ${seasons.seasons.early_autumn} {
      grass_color:     ${season.color.mid_autumn.foliage}
      foliage_color:   ${season.color.mid_autumn.foliage}
      fog_color:       ${season.color.mid_autumn.base}
      sky_color:       ${season.color.mid_autumn.base}
      water_color:     ${season.color.mid_autumn.base}
      water_fog_color: ${season.color.mid_autumn.base}
    }
    late_autumn: ${seasons.seasons.mid_autumn} {
      grass_color:     ${season.color.late_autumn.foliage}
      foliage_color:   ${season.color.late_autumn.foliage}
      fog_color:       ${season.color.late_autumn.base}
      sky_color:       ${season.color.late_autumn.base}
      water_color:     ${season.color.late_autumn.base}
      water_fog_color: ${season.color.late_autumn.base}
    }

    early_winter: ${season.base} {
      color: "#6edcfa"
      grass_color:     ${season.color.early_winter.foliage}
      foliage_color:   ${season.color.early_winter.foliage}
      fog_color:       ${season.color.early_winter.base}
      sky_color:       ${season.color.early_winter.base}
      water_color:     ${season.color.early_winter.base}
      water_fog_color: ${season.color.early_winter.base}
    }
    mid_winter: ${seasons.seasons.early_winter} {
      precipitation: "snow"
      grass_color:     ${season.color.mid_winter.foliage}
      foliage_color:   ${season.color.mid_winter.foliage}
      fog_color:       ${season.color.mid_winter.base}
      sky_color:       ${season.color.mid_winter.base}
      water_color:     ${season.color.mid_winter.base}
      water_fog_color: ${season.color.mid_winter.base}
    }
    late_winter: ${seasons.seasons.mid_winter} {
      grass_color:     ${season.color.late_winter.foliage}
      foliage_color:   ${season.color.late_winter.foliage}
      fog_color:       ${season.color.late_winter.base}
      sky_color:       ${season.color.late_winter.base}
      water_color:     ${season.color.late_winter.base}
      water_fog_color: ${season.color.late_winter.base}
    }

    early_wet: ${season.base} {
      color: "#4a68ff"
    }
    mid_wet: ${seasons.seasons.early_wet}
    late_wet: ${seasons.seasons.mid_wet}

    early_dry: ${season.base} {
      color: "#e6c81e"
    }
    mid_dry: ${seasons.seasons.early_dry}
    late_dry: ${seasons.seasons.mid_dry}
  }
  # The configurations for individual worlds.
  # If a configuration is not present for a world, the `default` configuration is used.
  worlds: {
    world: {
      # The length of the whole season cycle for this world.
      # This is in REAL TIME.
      # Day    = 120m      = 2h
      # Stage  =   2h * 36 = 72h
      # Season =  72h *  3 = 216h
      # Cycle  = 216h *  4 = 864h = 36d
      # Duration (required)
      cycle_length: 36d
      # The configuration for individual biomes.
      # If a configuration is not present for a biome,
      #   the configuration with no (or an empty) biome list is used.
      biomes: [
        {
          # All biomes that this configuration applies to.
          # Here, it is tropical biomes.
          # List <Biome>
          biomes: [
            "minecraft:desert", "minecraft:desert_hills", "minecraft:desert_lakes",
            "minecraft:savanna", "minecraft:savanna_plateau", "minecraft:shattered_savanna", "minecraft:shattered_savanna_plateau"
            "minecraft:badlands", "minecraft:badlands_plateau", "minecraft:roded_badlands", "minecraft:ooded_badlands_plateau", "minecraft:modified_badlands_plateau", "minecraft:modified_wooded_badlands_plateau"
          ]
          # The list of seasons that this configuration cycles through.
          # List <Season>
          seasons: [
            "early_wet", "mid_wet", "late_wet",
            "early_dry", "mid_dry", "late_dry"
          ]
        }
        {
          # No biome list is defined here. Therefore, this is the default configuration.

          seasons: [
            "early_spring", "mid_spring", "late_spring",
            "early_summer", "mid_summer", "late_summer",
            "early_autumn", "mid_autumn", "late_autumn",
            "early_winter", "mid_winter", "late_winter"
          ]
        }
      ]
    }
  }
}

# I don't even understand how this stuff works myself.
# TODO document later. I'm tired.

climate: {
  worlds: {
    default: {
      biomes: {
        temperature_multiplier: 1
        humidity_multiplier: 0.25
      }
      altitude: {
        optimal: 64
        multiplier: { temperature: 0.015 }
      }
    }
  }
}

fertility: {
  base_chance: 1
  worlds: {
    default: {
      safe_y: 48
      cover_height: 16
      cover_blocks: [
        "minecraft:glass"
      ]
      covered: {
        chance: 1
      }
      uncovered: {
        chance: 1
        seasons: {
          early_spring: 0.5
          mid_spring: 0.75

          early_winter: 0.5
          mid_winter: 0
          late_winter: 0.25
        }
        climate: {
          temperature: [ [ -0.1, 0.25, 1.4 ], 0.25, 1 ]
          humidity: [ [ 0.1, 0.3, 1.2 ], 0.25, 1 ]
        }
      }
    }
  }
  crops: {
    "minecraft:wheat": {
      temperature: [ [ -0.4, 0.25, 1.2 ], 0.8, 1.1 ]
      humidity: [ [ -0.1, 0.35, 1 ], 0.8, 1.1 ]
    }
  }
}
